{"version":3,"sources":["nodes/PrettyItemNode.js","nodes/NodeFunctions.js","components/FindPriorityButton.js","components/UIOverlay.js","nodes/CustomConnectionLine.js","ReactFlowChart.js","App.js","serviceWorker.js","index.js"],"names":["memo","data","useState","collapsed","setCollapsed","chevronDownStyle","bottom","top","chevronUpStyle","collapseButtonChip","Avatar","className","style","left","onClick","notCollapsedData","maxWidth","width","group","columnValues","map","x","i","key","fakeTopHandle","background","height","fakeLeftHandle","fakeRightHandle","right","fakeBotHandle","position","groupColor","borderRadius","Chip","size","label","outgoingNodes","length","type","id","opacity","title","textAlign","statusData","padding","marginTop","NodeFunctions","mondaySdk","this","monday","QueryConnections","QueryPositions","event","classList","Object","entries","storage","instance","getItem","then","res","console","log","value","connections","JSON","parse","onConnectParams","replaceIndex","source","target","sourceHandle","push","jsonString","stringify","setItem","sourceId","targetId","sourceHandleId","splice","positions","onNodeDragStopParams","itemId","api","variables","parseInt","FindPriorityButton","props","transform","useZoomPanHelper","useStoreState","store","nodes","marginRight","e","priority","highestPriorityIndex","nodeCount","forEach","node","FindPriority","repos","y","zoom","UIOverlay","zIndex","visibility","children","sourceX","sourceY","sourcePosition","targetX","targetY","targetPosition","edgePath","connectionLineType","connectionLineStyle","getBezierPath","fill","stroke","strokeWidth","d","cx","cy","r","ReactFlowChart","statusColors","loadPositions","currElements","savedPositions","nodeHelper","GetPositions","undefined","element","posData","updateOutgoingNodesData","onlyNodes","getOutgoers","htmlNodes","document","getElementsByClassName","htmlNodeId","j","innerText","setUpNewEdge","targetHandle","newEdgeId","pathSettings","animated","labelStyle","labelBgBorderRadius","labelBgStyle","edgeGripSetting","nodeTypes","prettyNode","PrettyItemNode","elements","setElements","getDatabasedElements","boardData","bdata","filteredItems","databasedElements","columnData","board","bIndex","indexOf","groupIds","groupIndex","currentGroupId","item","itIndex","groupName","titleName","nodeBackgroundColor","filteredData","colorString","num","numIndex","nodeColorOnFilter","itemColumnValues","boardColumnData","statusSettings","column","cIndex","statusInfoJson","labelData","localID","name","status","color","statusColor","isConnecting","boxShadow","savedConnections","GetConnections","connection","newEdge","loadConnections","useEffect","backgroundSettings","variant","gap","initialEdgeContextMenuState","currEdge","mouseX","mouseY","initialNodeContextMenuState","currNode","React","edgeContextMenuState","setEdgeContextMenuState","nodeContextMenuState","setNodeContextMenuState","defaultClose","flowChart","onElementClick","onConnect","params","els","addEdge","AddConnection","onNodeDragStop","AddPosition","onNodeContextMenu","preventDefault","clientX","clientY","onContextMenu","parentNode","firstChild","connectionLineComponent","CustomConnectionLine","goToHighestPriority","flowChartObj","toObject","setTransform","Menu","keepMounted","open","onClose","anchorReference","anchorPosition","MenuItem","currEdgeId","RemoveConnection","removeElements","execute","message","confirmButton","cancelButton","excludeCancelButton","DeleteItem","App","state","settings","listen","setState","context","boardIds","alert","reactFlowChart","boards","pathdisplay","edgeGrips","backgroundType","EventHasClass","kind","findPriorityEvent","display","fontFamily","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f2e54b54.chunk.js","sourcesContent":["import React, { memo, useState, useEffect } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\nimport ChevronDown from \"monday-ui-react-core/dist/icons/DropdownChevronDown\";\r\nimport ChevronUp from \"monday-ui-react-core/dist/icons/DropdownChevronUp\";\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n// todo: make color of node change based on whether or not it's finished\r\n// todo: make the color of the dependent nodes change based on whether or not it's finished\r\n\r\n\r\nexport default memo(({ data }) => {\r\n\r\n    // collapsed vs not collapsed\r\n    let [collapsed, setCollapsed] = useState(true);\r\n    var chevronDownStyle = collapsed ? { bottom: '-2px' } : { top: '-2px' };\r\n    var chevronUpStyle = collapsed ? { top: '-2px' } : { bottom: '-2px' };\r\n    var collapseButtonChip =\r\n        <Avatar className={\"small-avatar pos-absolute collapse-chip ignore-node-on-click\"}\r\n            style={{ left: \"-10px\", top: \"-10px\" }}\r\n            onClick={() => {\r\n                setCollapsed(!collapsed);\r\n            }}\r\n        >\r\n            <ChevronUp className={\"pos-absolute noClick\"} style={chevronUpStyle} />\r\n            <ChevronDown className={\"pos-absolute noClick\"} style={chevronDownStyle} />\r\n        </Avatar>;\r\n\r\n    // generates the divs for when it's collapsed and when it's not\r\n    var notCollapsedData = collapsed ? <div /> :\r\n        <div style={{ maxWidth: \"300px\" }}>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>Group</td>\r\n                        <td style={{ width: \"16px\" }} />\r\n                        <td className={\"centered-td\"}>{data?.group}</td>\r\n                    </tr>\r\n                    {data?.columnValues.map((x, i) => {\r\n                        switch (x['title']) {\r\n                            case \"Subitems\":\r\n                            case \"Person\":\r\n                            case \"Status\":\r\n                                return <tr key={i}></tr>;\r\n                            default:\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        <td>{x['title']}</td>\r\n                                        <td style={{ width: \"16px\" }} />\r\n                                        <td className={\"centered-td\"}>\r\n                                            {x['text'] === \"\" || x['text'] === null ? \"- - -\" : x['text']}\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                        }\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>;\r\n\r\n    //css styles for the handles (these are large and opacity 0)\r\n    //determines the \"hitbox\" for the handles\r\n    //currently the path connects into these hitboxes so it looks strange if it sticks out more than the fake dot            \r\n    var targetStyle = { background: '#0071d9', width: '30%', height: '20px', borderRadius: '0%', top: '-5px', opacity: '0%' };\r\n    var sourceStyleLeft = { background: 'var(--color-mud_black)', width: '20px', height: '30%', borderRadius: '0%', left: '-5px', opacity: '0%' };\r\n    var sourceStyleRight = { background: 'var(--color-mud_black)', width: '20px', height: '30%', borderRadius: '0%', right: '-5px', opacity: '0%' };\r\n    var sourceStyleBot = { background: 'var(--color-mud_black)', width: '30%', height: '20px', borderRadius: '0%', bottom: '-5px', opacity: '0%' };\r\n\r\n    //these are the little handle dots (purely visual)\r\n    var fakeTopHandle = <div className='react-flow__handle-top react-flow__handle' style={{ background: '#0071d9', width: '10px', height: '10px', top: '-5px' }}></div>;\r\n    var fakeLeftHandle = <div className='react-flow__handle-left react-flow__handle' style={{ background: 'var(--color-mud_black)', width: '10px', height: '10px', left: '-5px' }}></div>;\r\n    var fakeRightHandle = <div className='react-flow__handle-right react-flow__handle' style={{ background: 'var(--color-mud_black)', width: '10px', height: '10px', right: '-5px' }}></div>;\r\n    var fakeBotHandle = <div className='react-flow__handle-bottom react-flow__handle' style={{ background: 'var(--color-mud_black)', width: '10px', height: '10px', bottom: '-5px' }}></div>;\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                position: \"fixed\",\r\n                background: data?.groupColor,\r\n                height: \"16px\",\r\n                borderRadius: \"8px\",\r\n                top: \"0px\", left: \"0px\", right: \"0px\",\r\n            }}>\r\n                <div style={{\r\n                    position: \"absolute\",\r\n                    background: data?.groupColor,\r\n                    height: \"8px\",\r\n                    bottom: \"0px\", left: \"0px\", right: \"0px\"\r\n                }} />\r\n                {collapseButtonChip}\r\n                <Chip \r\n                    size={\"medium\"}\r\n                    label={data?.outgoingNodes.length}\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        right: \"-8px\", top: \"-8px\",\r\n                        background: data?.groupColor\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            <Handle\r\n                type=\"target\"\r\n                position=\"top\"\r\n                id=\"t\"\r\n                style={targetStyle}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"bottom\"\r\n                id=\"b\"\r\n                style={sourceStyleBot}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"right\"\r\n                id=\"r\"\r\n                style={sourceStyleRight}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"left\"\r\n                id=\"l\"\r\n                style={sourceStyleLeft}\r\n            />\r\n            {fakeTopHandle}\r\n            {fakeLeftHandle}\r\n            {fakeRightHandle}\r\n            {fakeBotHandle}\r\n\r\n            <div style={{ maxWidth: \"170px\" }}>\r\n                <h4>{data?.title}</h4>\r\n            </div>\r\n            {notCollapsedData}\r\n            <div style={{\r\n                textAlign: \"center\",\r\n                background: data?.statusData['color'],\r\n                borderRadius: \"4px\",\r\n                padding: \"4px\",\r\n                marginTop: \"8px\"\r\n            }}>\r\n                {data?.statusData['status'] === \"\" ? \"Empty\" : data.statusData['status']}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n});","import React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\nimport mondaySdk from \"monday-sdk-js\";\r\n\r\nclass NodeFunctions {\r\n\r\n    constructor(mondaySdk) {\r\n        this.monday = mondaySdk;\r\n\r\n        // Querying from monday.com\r\n        this.QueryConnections();\r\n        this.QueryPositions();\r\n    }\r\n\r\n    EventHasClass(event, className) {\r\n        if (event[\"path\"] == null) { return false; }\r\n        var classList = Object.entries(event[\"path\"][0]['classList']);\r\n        for (var i = 0; i < classList.length; i++) {\r\n            if (classList[i][1] === className) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    //#region Connections\r\n\r\n    /* Queries the connection data from monday.com.\r\n     */\r\n    QueryConnections() {\r\n        this.monday.storage.instance.getItem('connection_objects').then(res => {\r\n            console.log(res);\r\n\r\n            if (res.data.value !== null) {\r\n                this.connections = JSON.parse(res.data.value);\r\n                console.log(this.connections);\r\n            }\r\n            else {\r\n                this.connections = [];\r\n                console.log(this.connections);\r\n            }\r\n        });\r\n    }\r\n\r\n    /* Returns the connection data from monday.com in a object format.\r\n     */\r\n    GetConnections() {\r\n        return this.connections;\r\n    }\r\n\r\n    /* \r\n     * Adds and saves connections between two nodes.\r\n     * onConnectParams - the parameters that you get when a connection is made\r\n     */\r\n    AddConnection(onConnectParams) {\r\n\r\n        // if it's null we ain't messing with it\r\n        if (onConnectParams == null) { return; }\r\n        console.log(\"saving connections \", onConnectParams);\r\n\r\n        // checks to see if the current array has any of those connections\r\n        var replaceIndex = -1;\r\n        for (var i = 0; i < this.connections.length; i++) {\r\n            if (this.connections[i].source == onConnectParams.source &&\r\n                this.connections[i].target == onConnectParams.target &&\r\n                this.connections[i].sourceHandle == onConnectParams.sourceHandle) {\r\n                replaceIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // add or replace to the current array of connections \r\n        if (replaceIndex < 0) {\r\n            this.connections.push(onConnectParams);\r\n        }\r\n        else {\r\n            this.connections[i] = onConnectParams;\r\n        }\r\n\r\n        // json stringify the current connections\r\n        const jsonString = JSON.stringify(this.connections);\r\n\r\n        // save to monday.com persist\r\n        this.monday.storage.instance.setItem('connection_objects', jsonString).then(res => {\r\n            console.log(res);\r\n            console.log(jsonString);\r\n\r\n            this.QueryConnections();\r\n        });\r\n    }\r\n\r\n    /* Removes a single connection between two nodes from monday.com\r\n     * sourceId - the id of the source node\r\n     * targetId - the id of the target node\r\n     * sourceHandleId - the handle id of the source node\r\n     */\r\n    RemoveConnection(sourceId, targetId, sourceHandleId) {\r\n        // checks to see if the current array has one of those connections\r\n        var replaceIndex = -1;\r\n        for (var i = 0; i < this.connections.length; i++) {\r\n            if (this.connections[i].source == sourceId &&\r\n                this.connections[i].target == targetId && \r\n                this.connections[i].sourceHandle == sourceHandleId) {\r\n                replaceIndex = i;\r\n                //console.log(\"REMOVING FROM DATABASE\", this.connections[i]);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        // if the index isn't negative then it deletes\r\n        if (replaceIndex >= 0) {\r\n            // splices the target that was removed\r\n            //console.log(\"BEFORE REMOVAL:\", brem);\r\n            this.connections.splice(i, 1);\r\n            //console.log(\"AFTER REMOVAL:\", this.connections);\r\n            // json stringify the current connections\r\n            const jsonString = JSON.stringify(this.connections);\r\n\r\n            // save to monday.com persist\r\n            this.monday.storage.instance.setItem('connection_objects', jsonString).then(res => {\r\n                console.log(res);\r\n                console.log(jsonString);\r\n\r\n                this.QueryConnections();\r\n            });\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Positions\r\n\r\n    /* Queries the position data from monday.com.\r\n     */\r\n    QueryPositions() {\r\n        this.monday.storage.instance.getItem('node_positions').then(res => {\r\n            console.log(res);\r\n\r\n            if (res.data.value !== null) {\r\n                this.positions = JSON.parse(res.data.value);\r\n                console.log(this.positions);\r\n            }\r\n            else {\r\n                this.positions = [];\r\n                console.log(this.positions);\r\n            }\r\n        });\r\n    }\r\n\r\n    /* Returns the position data from monday.com in a object format.\r\n     */\r\n    GetPositions() {\r\n        return this.positions;\r\n    }\r\n\r\n    /* \r\n    * Adds and saves connections between two nodes.\r\n    * onConnectParams - the parameters that you get when a connection is made\r\n    */\r\n    AddPosition(onNodeDragStopParams) {\r\n\r\n        // if it's null we ain't messing with it\r\n        if (onNodeDragStopParams == null) { return; }\r\n        console.log(\"saving positions \", onNodeDragStopParams);\r\n\r\n        // checks to see if the current array has any of those positions\r\n        var replaceIndex = -1;\r\n        for (var i = 0; i < this.positions.length; i++) {\r\n            if (this.positions[i].id == onNodeDragStopParams.id) {\r\n                replaceIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // add or replace to the current array of positions \r\n        if (replaceIndex < 0) {\r\n            this.positions.push({\r\n                \"id\": onNodeDragStopParams.id,\r\n                \"position\": onNodeDragStopParams.position\r\n            });\r\n        }\r\n        else {\r\n            this.positions[i].position = onNodeDragStopParams.position;\r\n        }\r\n\r\n        // json stringify the current connections\r\n        const jsonString = JSON.stringify(this.positions);\r\n\r\n        // save to monday.com persist\r\n        this.monday.storage.instance.setItem('node_positions', jsonString).then(res => {\r\n            console.log(res);\r\n            console.log(jsonString);\r\n\r\n            this.QueryPositions();\r\n        });\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Database Manipulation\r\n\r\n    DeleteItem(itemId) {\r\n        console.log(typeof(itemId));\r\n        console.log(itemId);\r\n        // delete item query\r\n        this.monday.api(`mutation ($itemId: Int) \r\n        { \r\n            delete_item (item_id: $itemId) { id } \r\n        }`,\r\n            { variables: { itemId: parseInt(itemId) } }\r\n        ).then(res => {\r\n            //this.setState({ boardData: res.data });\r\n        });\r\n\r\n        // finds all of the edges and tries to de\r\n    }\r\n\r\n    //#endregion\r\n}\r\n\r\nexport default NodeFunctions;","import React from 'react';\r\nimport Button from \"monday-ui-react-core/dist/Button.js\";\r\nimport \"monday-ui-react-core/dist/Button.css\";\r\nimport ReactFlow, { useZoomPanHelper, useStoreState, useStoreActions } from 'react-flow-renderer';\r\n\r\nlet FindPriorityButton = props => {\r\n\r\n    const { transform } = useZoomPanHelper();\r\n    let [nodes, width, height] = useStoreState((store) => {\r\n        return [store.nodes, store.width, store.height];\r\n    } );\r\n\r\n    function FindPriority() {\r\n        var highestPriorityIndex = 0;\r\n        var nodeCount = 0;\r\n        Object.entries(nodes).forEach(function(node, i) {\r\n            if(node[1].data.outgoingNodes.length > nodeCount) {\r\n                nodeCount = node[1].data.outgoingNodes.length;\r\n                highestPriorityIndex = i;\r\n            }\r\n        });\r\n\r\n        console.log(nodes[highestPriorityIndex]);\r\n        return nodes[highestPriorityIndex];\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            size=\"small\"\r\n            style={{ marginRight: \"8px\" }}\r\n            onClick={(e) => {\r\n                var priority = FindPriority();\r\n                var repos = {\r\n                    x: -priority.position.x, //+ width / 2, \r\n                    y: -priority.position.y, //+ height / 2, \r\n                    zoom: 1};\r\n                transform(repos);\r\n            }}>\r\n            Find Priority\r\n        </Button>\r\n    );\r\n}\r\n\r\nexport { FindPriorityButton };\r\nexport default FindPriorityButton;","import React from 'react';\r\n\r\nlet UIOverlay = props => {\r\n    return (\r\n        <div style={{\r\n            zIndex: \"100\",\r\n            position: \"absolute\",\r\n            top: \"0px\", bottom: \"0px\", right: \"0px\", left: \"0px\",\r\n            visibility: \"hidden\"\r\n        }}>\r\n            <span className=\"ui-overlay-item\">\r\n                {props?.children}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { UIOverlay };\r\nexport default UIOverlay;","import React from 'react';\r\nimport { getBezierPath } from 'react-flow-renderer';\r\n\r\nexport default ({\r\n    sourceX,\r\n    sourceY,\r\n    sourcePosition,\r\n    targetX,\r\n    targetY,\r\n    targetPosition,\r\n    connectionLineType,\r\n    connectionLineStyle,\r\n}) => {\r\n\r\n    const edgePath = getBezierPath({ sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition });\r\n    //straight path\r\n    //d={`M${sourceX},${sourceY} L ${targetX},${targetY}`}\r\n\r\n    return (\r\n        <g>\r\n            <path\r\n                fill=\"none\"\r\n                stroke=\"#fff\"\r\n                strokeWidth={5}\r\n                className=\"animated\"\r\n\r\n                d={edgePath}\r\n\r\n            />\r\n            <circle cx={targetX} cy={targetY} fill=\"#0071d9\" r={5} stroke=\"#fff\" strokeWidth={1.5} />\r\n        </g>\r\n    );\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport ReactFlow, { removeElements, addEdge, Controls, Background, getIncomers, getOutgoers } from 'react-flow-renderer';\r\nimport PrettyItemNode from \"./nodes/PrettyItemNode.js\";\r\nimport CustomConnectionLine from \"./nodes/CustomConnectionLine.js\";\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nlet ReactFlowChart = props => {\r\n\r\n\t// this is an example of an infinite loop. The same thing happens again and again in the same frame\r\n\t// dab exists -> renders -> dab is set -> renders -> dab is set-> ...\r\n\t//const [dab, setDab] = useState(5);\r\n\t// setDab(4);\r\n\r\n\t// returns the right color based on the current filter\r\n\tfunction nodeColorOnFilter(filteredData, itemId) {\r\n\r\n\t\tif (filteredData == null) return \"var(--color-snow_white)\";\r\n\r\n\t\tvar colorString = \"var(--color-jarco_gray)\";\r\n\t\tObject.entries(filteredData).forEach(function (num, numIndex) {\r\n\t\t\t//console.log(\"suggestion for \" + itemId + \": \" + num[1]);\r\n\t\t\tif (itemId == num[1]) {\r\n\t\t\t\tcolorString = \"var(--color-snow_white)\";\r\n\t\t\t\t//console.log(\"Holy smokes, you did it! they're equal! now colorstring: \" + colorString);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn colorString;\r\n\t}\r\n\r\n\t// determines the color of a node\r\n\tvar statusColors = null;\r\n\tfunction statusColor(itemColumnValues, boardColumnData) {\r\n\r\n\t\t// retrieves the status colors if not done already\r\n\t\tif (statusColors == null) {\r\n\r\n\t\t\tvar statusSettings = \"pog\";\r\n\t\t\tboardColumnData?.forEach(function (column, cIndex) {\r\n\t\t\t\tif (column['title'] == \"Status\") {\r\n\t\t\t\t\tstatusSettings = column['settings_str'];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tstatusColors = {};\r\n\t\t\tvar statusInfoJson = JSON.parse(statusSettings);\r\n\t\t\tObject.entries(statusInfoJson['labels']).forEach(function (labelData) {\r\n\t\t\t\tvar localID = labelData[0];\r\n\t\t\t\tvar name = labelData[1];\r\n\t\t\t\tstatusColors[name] = statusInfoJson['labels_colors'][localID]['color'];\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// gets the status from the column values\r\n\t\tvar status = \"\";\r\n\t\titemColumnValues?.forEach(function (column, cIndex) {\r\n\t\t\tif (column['title'] === \"Status\") {\r\n\t\t\t\tstatus = column['text'];\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// returns the right color css\r\n\t\tif (status in statusColors) return { status: status, color: statusColors[status] };\r\n\t\telse { return { status: \"\", color: \"var(--color-ui_grey)\" }; }\r\n\t}\r\n\r\n\t/* CURRENTLY UNABLE TO WORK DUE TO CONSTRAINTS WITH MONDAY API AND SUBITEMS \r\n\t// pass in the item and the board it is in, alogn with all the boardData\r\n\t// returns an array that holds all the data about the subitems of an item\r\n\tfunction getSubitems(boardData, board, parentItem){\r\n\t  let subitemArray = [];\r\n\r\n\t  let subitemBoard;\r\n\t  boardData.forEach(function(board){\r\n\t\tif (board['name'] == \"Subitems of \" + board['name']){\r\n\t\t  subitemBoard = board;\r\n\t\t}\r\n\t  });\r\n\r\n\t  let parentSubitemText = parentItem['column_values'][0]['text'];\r\n\t  subitemBoard.forEach(function(subitem){\r\n\t    \r\n\t\t//if the parent subitem text contains the name of the subitem,\r\n\t\t//then that subitem in the pool is a subitem of our parent\r\n\t\tif (parentSubitemText.indexOf(subitem['name']) > 0){\r\n\t\t  subitemArray.push(subitem);\r\n\t\t}\r\n\t  });\r\n\r\n\t  return subitemArray;\r\n\t}*/\r\n\r\n\t//#region Loading\r\n\r\n\tfunction loadPositions(currElements) {\r\n\t\t//Get the saved data\r\n\t\tlet savedPositions = props?.nodeHelper.GetPositions();\r\n\r\n\t\t//if there was no saved positional data, return\r\n\t\tif (savedPositions == undefined) return currElements;\r\n\r\n\t\tconsole.log(\"loading saved node positions of\", currElements);\r\n\r\n\t\t//loop through current elements in board\r\n\t\tcurrElements.forEach(function (element) {\r\n\t\t\t// if the element is not a node, skip it\r\n\t\t\tif (element['type'] != \"prettyNode\") return;\r\n\r\n\t\t\t// loop through the saved position data\r\n\t\t\tsavedPositions.forEach(function (posData) {\r\n\r\n\t\t\t\t//if the saved position data id matches the current element id\r\n\t\t\t\t//update the current element's position\r\n\t\t\t\tif (posData['id'] == element['id']) {\r\n\t\t\t\t\telement['position']['x'] = posData['position']['x'];\r\n\t\t\t\t\telement['position']['y'] = posData['position']['y'];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\t\treturn currElements;\r\n\t}\r\n\r\n\t//returns an array of elements populated with saved connections\r\n\tfunction loadConnections(currElements) {\r\n\t\t//Get the saved data\r\n\t\tlet savedConnections = props?.nodeHelper.GetConnections();\r\n\r\n\t\t//if there was no saved positional data, return\r\n\t\tif (savedConnections == undefined) return currElements;\r\n\r\n\t\tconsole.log(\"loading saved connections of\", currElements);\r\n\r\n\t\t// create an array of only nodes in the board\r\n\t\tlet onlyNodes = [];\r\n\t\tcurrElements.forEach(function (element) {\r\n\t\t\t// if the element is not a node, skip it\r\n\t\t\tif (element['type'] == \"prettyNode\") {\r\n\t\t\t\tonlyNodes.push(element);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// add in all the saved connections\r\n\t\tsavedConnections.forEach(function (connection) {\r\n\t\t\tlet newEdge = setUpNewEdge(connection['source'], connection['target'], connection['sourceHandle'], connection['targetHandle']);\r\n\r\n\t\t\t//console.log('edgeloaded:', newEdge);\r\n\t\t\tonlyNodes.push(newEdge);\r\n\t\t\t//currElements.push(newEdge);\r\n\r\n\t\t});\r\n\r\n\t\t//return currElements;\r\n\t\treturn onlyNodes;\r\n\t}\r\n\r\n\t//#endregion\r\n\r\n\t// provides the nodes passed in with data from getIncomers()\r\n\tfunction updateOutgoingNodesData(currElements) {\r\n\r\n\t\tconsole.log(\"updating data of\", currElements);\r\n\r\n\t\t// loop through board data\r\n\t\tlet onlyNodes = [];\r\n\t\tcurrElements.forEach(function (element) {\r\n\r\n\t\t\t// if the element is not a node, skip it\r\n\t\t\tif (element['type'] != \"prettyNode\") return;\r\n\r\n\t\t\t//element['data']['incomingNodes'] = getIncomers(element, currElements);\r\n\t\t\telement['data']['outgoingNodes'] = getOutgoers(element, currElements);\r\n\t\t\tonlyNodes.push(element);\r\n\r\n\t\t});\r\n\t\t//console.log(document.getElementsByClassName(\"react-flow__node\"));\r\n\r\n\t\t// i go into the actual html to change the number\r\n\t\t// this is because the nodes only rerender off of specific circumstances\r\n\t\t// shhhhh\r\n\t\tlet i = 0;\r\n\t\tlet htmlNodes = document.getElementsByClassName(\"react-flow__node\");\r\n\t\tfor (i = 0; i < htmlNodes.length; i++) {\r\n\t\t\tlet htmlNodeId = htmlNodes[i].classList[2];\r\n\r\n\t\t\tlet j=0;\r\n\t\t\tfor(j=0; j<onlyNodes.length;j++){\r\n\t\t\t\tif(htmlNodeId == onlyNodes[j]['id']){\r\n\t\t\t\t\tlet currLabel = htmlNodes[i].getElementsByClassName(\"MuiChip-label\")[0];\r\n\t\t\t\t\tcurrLabel.innerText = onlyNodes[j]['data']['outgoingNodes'].length + \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//let currLabel = htmlNodes[i].getElementsByClassName(\"MuiChip-label\")[0];\r\n\t\t\t//console.log(htmlNodes[i].getElementsByClassName(\"MuiChip-label\")[0]);\r\n\r\n\r\n\t\t\t//console.log(htmlNodes[i].getElementsByClassName(\"MuiChip-label\")[0].innerText);\r\n\t\t\t//currLabel.innerText = elements['data']['outgoingNodes'].length;\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\treturn currElements;\r\n\t}\r\n\r\n\t// returns a json edge element with the correct styling and data\r\n\tfunction setUpNewEdge(source, target, sourceHandle, targetHandle) {\r\n\t\tlet newEdgeId = 'e' + source + '_' + sourceHandle + '-' + target;\r\n\t\tlet newEdge = {\r\n\t\t\tid: newEdgeId,\r\n\t\t\tsource: source,\r\n\t\t\ttarget: target,\r\n\t\t\tsourceHandle: sourceHandle,\r\n\t\t\ttargetHandle: targetHandle,\r\n\t\t\tclassName: newEdgeId,\r\n\r\n\t\t\ttype: props?.pathSettings,\r\n\t\t\tanimated: true,\r\n\r\n\t\t\tstyle: { stroke: '#fff', strokeWidth: '5px' },\r\n\t\t\tlabel: \"jank\",\r\n\t\t\tlabelStyle: { visibility: 'hidden' },\r\n\t\t\tlabelBgBorderRadius: '100%',\r\n\t\t\tlabelBgStyle: {\r\n\t\t\t\theight: '24.3594', fill: 'var(--color-mud_black)', stroke: 'white', strokeWidth: '3',\r\n\t\t\t\tvisibility: (props?.edgeGripSetting ? 'visible' : 'hidden')\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\treturn newEdge;\r\n\t}\r\n\r\n\r\n\r\n\r\n\tconst nodeTypes = {\r\n\t\tprettyNode: PrettyItemNode\r\n\t};\r\n\r\n\t// elements are set to board elements for initial state\r\n\tconst [elements, setElements] = useState([]);\r\n\r\n\tfunction getDatabasedElements() {\r\n\t\t// sets/populates board elements\r\n\t\tif (props?.boardData != null) {\r\n\t\t\tlet bdata = props?.boardData;\r\n\t\t\tlet filteredItems = props?.filteredItems;\r\n\r\n\t\t\tlet databasedElements = [];\r\n\r\n\t\t\tconsole.log(\"DATA FROM PASSED PROPS\", bdata);\r\n\r\n\t\t\t// retrieves column data FOR JUST THE FIRST BOARD\r\n\t\t\tvar columnData = bdata[0]['columns'];\r\n\r\n\t\t\t//Goes into each board element in the JSON data array\r\n\t\t\t//By the end of it, a complete node board will be populated with nodes and default connections\r\n\t\t\tbdata.forEach(function (board, bIndex) {\r\n\t\t\t\tif (board['name'].indexOf(\"Subitems of\") == 1) return;\r\n\t\t\t\tvar previousNodeId = -1;\r\n\t\t\t\tvar previousGroupName = \"\";\r\n\r\n\t\t\t\t// Adds an id number & index to the group ids\r\n\t\t\t\tlet groupIds = {};\r\n\t\t\t\tlet groupIndex = {};\r\n\t\t\t\tlet currentGroupId = 0;\r\n\t\t\t\tboard['items'].forEach(function (item, itIndex) {\r\n\t\t\t\t\tlet groupName = item['group']['title'];\r\n\t\t\t\t\tif (!(groupName in groupIds)) {\r\n\t\t\t\t\t\tgroupIds[groupName] = currentGroupId;\r\n\t\t\t\t\t\tgroupIndex[groupName] = 0;\r\n\t\t\t\t\t\tcurrentGroupId++;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//Goes into each item element in the JSON data\r\n\t\t\t\tboard['items'].forEach(function (item, itIndex) {\r\n\r\n\t\t\t\t\tlet groupName = item['group']['title'];\r\n\t\t\t\t\tlet titleName = item['name'];\r\n\t\t\t\t\tlet nodeBackgroundColor = nodeColorOnFilter(filteredItems, item['id']);\r\n\r\n\t\t\t\t\t// gets status data\r\n\t\t\t\t\tlet statusData = statusColor(item['column_values'], columnData);\r\n\r\n\t\t\t\t\t// gets subitems if the item has subitems\r\n\t\t\t\t\t// item['column_values'][0]['text'] provides a text of the subitems\r\n\t\t\t\t\t// if no subitems, value will be empty string\r\n\t\t\t\t\tif (item['column_values'][0] != \"\") {\r\n\t\t\t\t\t\tlet subitems = item['column_values'][0]['text'];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// adds a node\r\n\t\t\t\t\tdatabasedElements.push(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tid: item['id'],\r\n\t\t\t\t\t\t\ttype: \"prettyNode\",\r\n\t\t\t\t\t\t\tclassName: item['id'],\r\n\t\t\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\t\ttitle: titleName,\r\n\t\t\t\t\t\t\t\tgroup: groupName, groupColor: item['group']['color'],\r\n\t\t\t\t\t\t\t\tstatusData: statusData,\r\n\t\t\t\t\t\t\t\tcolumnValues: item['column_values'],\r\n\t\t\t\t\t\t\t\toutgoingNodes: [],\r\n\t\t\t\t\t\t\t\tisConnecting: false\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\t\t\tpadding: \"16px\",\r\n\t\t\t\t\t\t\t\tborderRadius: \"8px\", //border: \"4px solid\", borderColor: item['group']['color'],\r\n\t\t\t\t\t\t\t\tbackground: nodeBackgroundColor, //item['group']['color']\r\n\t\t\t\t\t\t\t\tboxShadow: \"0px 6px 20px -2px rgba(0, 0, 0, 0.2)\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tposition: { x: 325 * groupIds[groupName] + bIndex * 1000, y: 300 * groupIndex[groupName] }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// increments group index\r\n\t\t\t\t\tgroupIndex[groupName] += 1;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tconsole.log(\"ELEMENTS BEFORE LOADING SAVED DATA\", databasedElements);\r\n\r\n\t\t\t// updates the positions of all the ndoes from saved data\r\n\t\t\tdatabasedElements = loadPositions(databasedElements);\r\n\r\n\t\t\t// adds in connections from saved data\r\n\t\t\tdatabasedElements = loadConnections(databasedElements);\r\n\r\n\t\t\t// passes nodes info on their incoming connections\r\n\t\t\tdatabasedElements = updateOutgoingNodesData(databasedElements);\r\n\r\n\t\t\tconsole.log(\"----BOARD DATA LOADED-----\");\r\n\t\t\t//console.log(bdata);\r\n\t\t\tconsole.log(databasedElements);\r\n\t\t\tconsole.log(\"----------\");\r\n\r\n\t\t\treturn databasedElements;\r\n\t\t}\r\n\t\treturn [];\r\n\t}\r\n\r\n\t// updates elements when props changes\r\n\tuseEffect(() => {\r\n\t\tsetElements(getDatabasedElements());\r\n\t}, [props]);\r\n\r\n\t// background settings\r\n\tvar background = <div></div>;\r\n\tif (props?.backgroundSettings !== \"none\" && props?.backgroundSettings !== null) {\r\n\t\tbackground =\r\n\t\t\t<Background\r\n\t\t\t\tvariant={props?.backgroundSettings}\r\n\t\t\t\tgap={32}\r\n\t\t\t\tsize={2}\r\n\t\t\t/>;\r\n\t}\r\n\r\n\t//#region ReactFlow Callbacks\r\n\r\n\tconst onConnect = (params) => {\r\n\t\tsetElements(function (els) {\r\n\t\t\tif (els !== null) {\r\n\t\t\t\tels = addEdge(setUpNewEdge(params.source, params.target, params.sourceHandle, params.targetHandle), els);\r\n\t\t\t}\r\n\r\n\t\t\t// update internal node data with new incoming connections\r\n\t\t\tels = updateOutgoingNodesData(els);\r\n\r\n\t\t\tconsole.log(els);\r\n\t\t\t//console.log('onConnect', params)\r\n\t\t\treturn els;\r\n\t\t});\r\n\r\n\t\t// save dat shit\r\n\t\tprops?.nodeHelper.AddConnection(params);\r\n\t};\r\n\r\n\t/*const onConnectStart = (event, { nodeId, handleType }) => {\r\n\t\tconsole.log('on connect start', { nodeId, handleType });\r\n\r\n\t\t//loop through all the current elements and replace target handles with bigger versions\r\n\t\tsetElements(function (els) {\r\n\t\t\tels.forEach(function (elsItem) {\r\n\t\t\t\tif (elsItem['type'] != \"prettyNode\") return;\r\n\r\n\t\t\t\telsItem['data']['isConnecting'] = true;\r\n\t\t\t\t//console.log(elsItem['data']['isConnecting']);\r\n\r\n\t\t\t});\r\n\t\t\treturn els;\r\n\t\t});\r\n\t};\r\n\r\n\tconst onConnectStop = (event) => {\r\n\t\t//console.log('on connect stop', event);\r\n\r\n\t\t//loop through all the current elements and replace target handles with bigger versions\r\n\t\tsetElements(function (els) {\r\n\t\t\tels.forEach(function (elsItem) {\r\n\t\t\t\tif (elsItem['type'] != \"prettyNode\") return;\r\n\r\n\t\t\t\telsItem['data']['isConnecting'] = false;\r\n\t\t\t\t//elsItem['data']['groupColor'] = '#579bfc';\r\n\t\t\t\t//elsItem['style']['background'] = '#579bfc';\t\r\n\t\t\t\t//console.log(elsItem);\r\n\r\n\t\t\t});\r\n\t\t\treturn els;\r\n\t\t});\r\n\r\n\t};*/\r\n\r\n\tconst onNodeDragStop = (event, node) => {\r\n\t\t//console.log(\"onNodeDragStop nodes \", node);\r\n\t\tprops?.nodeHelper.AddPosition(node);\r\n\t\tsetElements(function(els) {\r\n\t\t\tels = loadPositions(els);\r\n\t\t\treturn els;\r\n\t\t});\r\n\t}\r\n\r\n\tconst onElementsRemove = (elementsToRemove) => {\r\n\t\t//setElements((els) => removeElements(elementsToRemove, els));\r\n\t}\r\n\r\n\t//#endregion\r\n\r\n\t//#region Menu Callbacks\r\n\r\n\t// context menu handling\r\n\tconst initialEdgeContextMenuState = {\r\n\t\tcurrEdge: null,\r\n\t\tmouseX: null,\r\n\t\tmouseY: null,\r\n\t};\r\n\r\n\tconst initialNodeContextMenuState = {\r\n\t\tcurrNode: null,\r\n\t\tmouseX: null,\r\n\t\tmouseY: null,\r\n\t};\r\n\r\n\tconst [edgeContextMenuState, setEdgeContextMenuState] = React.useState(initialEdgeContextMenuState);\r\n\tconst [nodeContextMenuState, setNodeContextMenuState] = React.useState(initialNodeContextMenuState);\r\n\r\n\t// fired when context menu opened on an edge\r\n\t// called from onContextMenu html tag on the pane\r\n\tconst onEdgeContextMenu = (event) => {\r\n\t\t// prevent default context menu from firing\r\n\t\tevent.preventDefault();\r\n\r\n\t\t//console.log(event.target);\r\n\t\t//console.log(event.target.parentNode.parentNode.firstChild);\r\n\r\n\t\t// if right clicked on an edge, activate edge menu\r\n\t\tif (event.target.className['baseVal'] == \"react-flow__edge-path\") {\r\n\t\t\tsetEdgeContextMenuState({\r\n\t\t\t\t// this currEdge is the path element\r\n\t\t\t\tcurrEdge: event.target,\r\n\t\t\t\tmouseX: event.clientX - 2,\r\n\t\t\t\tmouseY: event.clientY - 4,\r\n\t\t\t});\r\n\t\t}\r\n\t\t// if right clicked on an edge label, activate edge menu\r\n\t\telse if (event.target.className['baseVal'] == \"react-flow__edge-textbg\") {\r\n\t\t\tsetEdgeContextMenuState({\r\n\t\t\t\t// this currEdge is the path element label is on\r\n\t\t\t\tcurrEdge: event.target.parentNode.parentNode.firstChild,\r\n\t\t\t\tmouseX: event.clientX - 2,\r\n\t\t\t\tmouseY: event.clientY - 4,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// fired when context menu opened on a node\r\n\t// callback from ReactFlow\r\n\tconst onNodeContextMenu = (event, node) => {\r\n\t\t// prevent default context menu from firing\r\n\t\tevent.preventDefault();\r\n\r\n\t\t// display context menu on the right-clicked node\r\n\t\tsetNodeContextMenuState({\r\n\t\t\tcurrNode: node,\r\n\t\t\tmouseX: event.clientX - 2,\r\n\t\t\tmouseY: event.clientY - 4,\r\n\t\t});\r\n\t}\r\n\r\n\t// close the context menu when clicked away\r\n\tconst defaultClose = () => {\r\n\t\tconsole.log(\"context menu closed\");\r\n\t\tsetEdgeContextMenuState(initialEdgeContextMenuState);\r\n\t\tsetNodeContextMenuState(initialNodeContextMenuState);\r\n\t};\r\n\r\n\tfunction onNodeDelete() {\r\n\r\n\t\tprops?.monday.execute(\"confirm\", {\r\n\t\t\tmessage: \"Delete this item? \" +\r\n\t\t\t\t\"It will be kept in your Recycle Bin for 30 days.\",\r\n\t\t\tconfirmButton: \"Delete\",\r\n\t\t\tcancelButton: \"Cancel\",\r\n\t\t\texcludeCancelButton: false\r\n\t\t}).then((res) => {\r\n\t\t\tif (res.data[\"confirm\"] === true) {\r\n\t\t\t\t// removes the node\r\n\t\t\t\tsetElements((els) => removeElements([nodeContextMenuState['currNode']], els));\r\n\t\t\t\t//console.log(\"deleted node\", nodeContextMenuState['currNode']);\r\n\r\n\t\t\t\t// close the context menu\r\n\t\t\t\tsetNodeContextMenuState(initialNodeContextMenuState);\r\n\r\n\t\t\t\t//Mutates the monday database.\r\n\t\t\t\tprops?.nodeHelper.DeleteItem(nodeContextMenuState['currNode'].id);\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tfunction onEdgeDelete() {\r\n\t\t// get the edge id from the class name list of the parent\r\n\t\t// i stored the id in the class name \r\n\t\t// since it's the only place I can store data in the html of a default edge\r\n\t\tlet currEdgeId = edgeContextMenuState['currEdge'].parentNode.classList.item(2);\r\n\r\n\t\t// loop through the elements until you find an id that matches currEdgeId\r\n\t\t// this way you can remove the actual edge that is in elements (we only have the html DOM element)\r\n\t\t// for loop in order to break out as soon as edge is found\r\n\t\tlet i = 0;\r\n\t\t//console.log(\"DELETING FROM\", elements);\r\n\t\tfor (i = 0; i < elements.length; i++) {\r\n\t\t\tif (elements[i]['id'] == currEdgeId) {\r\n\r\n\t\t\t\t// if id matches, remove the edge from the database\r\n\t\t\t\tprops?.nodeHelper.RemoveConnection(elements[i]['source'], elements[i]['target'], elements[i]['sourceHandle']);\r\n\r\n\t\t\t\t// if id matches, remove the edge from elements\r\n\t\t\t\t// also update data\r\n\t\t\t\tsetElements(function(els){\r\n\t\t\t\t\tels = removeElements([elements[i]], els);\r\n\t\t\t\t\tels = updateOutgoingNodesData(els);\r\n\t\t\t\t\treturn els;\r\n\t\t\t\t}); \r\n\t\t\t\t//console.log(\"deleted edge\", elements[i]);\r\n\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// close the context menu\r\n\t\tsetEdgeContextMenuState(initialEdgeContextMenuState);\r\n\t}\r\n\r\n\t//#endregion\r\n\r\n\t//#region UI Callbacks\r\n\r\n\t// subscribes to the go to highest priority event\r\n\t/*\r\n\tuseEffect(() => {\r\n\t\tconsole.log(\"the event changed\");\r\n\t\t//setElements(boardElements);\r\n\t}, [props?.findPriorityEvent]);\r\n\t*/\r\n\r\n\tfunction GoToHighestPriority(event, element) {\r\n\t\tconsole.log(flowChartObj);\r\n\t\tvar flowChartObj = flowChart.toObject();\r\n\t\tflowChart.setTransform({ x: 100, y: 100, zoom: flowChartObj.zoom });\r\n\t}\r\n\r\n\t//#endregion\r\n\r\n\tvar flowChart =\r\n\t\t<ReactFlow\r\n\t\t\telements={elements}\r\n\t\t\tnodeTypes={nodeTypes}\r\n\r\n\t\t\tonElementClick={props?.onElementClick}\r\n\t\t\tonConnect={onConnect}\r\n\t\t\t//onConnectStart={onConnectStart}\r\n\t\t\t//onConnectStop={onConnectStop}\r\n\t\t\tonNodeDragStop={onNodeDragStop}\r\n\t\t\t//onElementsRemove={onElementsRemove}\r\n\t\t\tonNodeContextMenu={onNodeContextMenu}\r\n\t\t\tonContextMenu={onEdgeContextMenu}\r\n\r\n\t\t\tconnectionLineComponent={CustomConnectionLine}\r\n\t\t\tgoToHighestPriority={GoToHighestPriority}\r\n\t\t>\r\n\t\t\t<Controls />\r\n\t\t\t{background}\r\n\r\n\t\t\t<Menu\r\n\t\t\t\tkeepMounted\r\n\t\t\t\topen={edgeContextMenuState.mouseY !== null}\r\n\t\t\t\tonClose={defaultClose}\r\n\t\t\t\tanchorReference=\"anchorPosition\"\r\n\t\t\t\tanchorPosition={\r\n\t\t\t\t\tedgeContextMenuState.mouseY !== null && edgeContextMenuState.mouseX !== null\r\n\t\t\t\t\t\t? { top: edgeContextMenuState.mouseY, left: edgeContextMenuState.mouseX }\r\n\t\t\t\t\t\t: undefined\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<MenuItem onClick={onEdgeDelete}>Delete Connection</MenuItem>\r\n\t\t\t</Menu>\r\n\r\n\t\t\t<Menu\r\n\t\t\t\tkeepMounted\r\n\t\t\t\topen={nodeContextMenuState.mouseY !== null}\r\n\t\t\t\tonClose={defaultClose}\r\n\t\t\t\tanchorReference=\"anchorPosition\"\r\n\t\t\t\tanchorPosition={\r\n\t\t\t\t\tnodeContextMenuState.mouseY !== null && nodeContextMenuState.mouseX !== null\r\n\t\t\t\t\t\t? { top: nodeContextMenuState.mouseY, left: nodeContextMenuState.mouseX }\r\n\t\t\t\t\t\t: undefined\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<MenuItem onClick={onNodeDelete}>Delete Node</MenuItem>\r\n\t\t\t</Menu>\r\n\r\n\t\t</ReactFlow>;\r\n\r\n\treturn (flowChart);\r\n}\r\n\r\nexport default ReactFlowChart;","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.css\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport Search from \"monday-ui-react-core/dist/icons/Search\";\r\n\r\nimport { ReactFlowProvider } from 'react-flow-renderer';\r\nimport { useZoomPanHelper } from 'react-flow-renderer';\r\nimport PrettyItemNode from \"./nodes/PrettyItemNode.js\";\r\nimport NodeFunctions from \"./nodes/NodeFunctions.js\";\r\nimport \"./css/node-view.css\";\r\n\r\nimport FindPriorityButton from \"./components/FindPriorityButton.js\";\r\nimport Button from \"monday-ui-react-core/dist/Button.js\";\r\nimport \"monday-ui-react-core/dist/Button.css\";\r\nimport UIOverlay from \"./components/UIOverlay\";\r\n\r\nimport ReactFlowChart from \"./ReactFlowChart.js\";\r\n\r\n\r\nconst monday = mondaySdk();\r\nconst nodeHelper = new NodeFunctions(monday);\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Default state\r\n    this.state = {\r\n      settings: {},\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  // use to communicate with event listeners\r\n  componentDidMount() {\r\n    monday.listen(\"settings\", res => {\r\n      this.setState({ settings: res.data });\r\n    });\r\n\r\n    monday.listen(\"context\", res => {\r\n      this.setState({ context: res.data });\r\n\r\n      // board info query\r\n      monday.api(`query ($boardIds: [Int]) \r\n      { \r\n        boards (ids:$boardIds) { \r\n          name \r\n          items { id name group {title color} column_values { title text } } \r\n          columns {\r\n            title\r\n            settings_str\r\n          }\r\n        } \r\n      }`,\r\n        { variables: { boardIds: this.state.context.boardIds } }\r\n      ).then(res => {\r\n        this.setState({ boardData: res.data });\r\n      });\r\n\r\n      console.log(this.state.context);\r\n    });\r\n\r\n    monday.listen(\"itemIds\", (res) => {\r\n      this.setState({ filteredItems: res.data });\r\n    });\r\n\r\n    monday.listen(\"events\", (res) => {\r\n      switch (res[\"type\"]) {\r\n        case \"new_items\":\r\n          alert(\"NEW ITEM BRUH\");\r\n          break;\r\n        case \"change_column_value\":\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    // what to do when the user clicks on an element\r\n    function onElementClick(event, element) {\r\n\r\n      // checks for ignore node click\r\n      if (event == null) { return; }\r\n      try {\r\n        console.log(JSON.stringify(event));\r\n      }\r\n      catch {\r\n        console.log(\"spaghetti code oh yeah\")\r\n        return;\r\n      }\r\n      if (nodeHelper.EventHasClass(event, \"ignore-node-on-click\")) {\r\n        console.log(\"Click detected, but ignoring.\");\r\n        return;\r\n      }\r\n\r\n      // only do node actions if it's our node\r\n      if (typeof (element) === typeof (PrettyItemNode)) {\r\n        // monday.com FUCKING SUCKS BECAUSE THEIR API IS FUCKING BROKEN SINCE AUGUST AND THIS DOESN'T FUCKING WORK\r\n        //monday.execute('openItemCard', { itemId: element[\"id\"], kind: 'columns' });\r\n\r\n        console.log('node actions happened i guess', event);\r\n\r\n        monday.execute('openItemCard', { itemId: element[\"id\"], kind: 'columns' });\r\n      }\r\n      else {\r\n        alert(\"OH\");\r\n      }\r\n    }\r\n\r\n    var reactFlowChart =\r\n      <ReactFlowChart\r\n        nodeHelper={nodeHelper}\r\n        monday={monday}\r\n\r\n        boardData={this.state.boardData?.boards}\r\n        filteredItems={this.state?.filteredItems}\r\n\r\n        pathSettings={this.state.settings?.pathdisplay}\r\n        edgeGripSetting={this.state.settings?.edgeGrips}\r\n        backgroundSettings={this.state.settings?.backgroundType}\r\n\r\n        onElementClick={onElementClick}\r\n\r\n        findPriorityEvent={this.state.findPriorityEvent}\r\n      />;\r\n\r\n\r\n    // note: adding a background threw a shit ton of errors for some reason whoops\r\n    return (\r\n      <div\r\n        className=\"App\"\r\n        style={{\r\n          display: \"block\",\r\n          background: \"var(--color-mud_black)\",\r\n          fontFamily: \"Roboto, sans-serif\"\r\n        }}\r\n      >\r\n\r\n        <ReactFlowProvider>\r\n          {reactFlowChart}\r\n\r\n          <UIOverlay>\r\n\r\n            <FindPriorityButton />\r\n            <Button\r\n              size=\"small\"\r\n              style={{ marginRight: \"8px\" }}\r\n              onClick={() => {\r\n                console.log(\"visualizing group priorities...\");\r\n              }}>\r\n              Visualize Group Priorities\r\n            </Button>\r\n            <Button\r\n              size=\"small\" kind=\"secondary\"\r\n              style={{ marginRight: \"8px\" }}\r\n              onClick={() => {\r\n              }}>\r\n              Recenter\r\n            </Button>\r\n            <Button\r\n              size=\"small\" kind=\"secondary\"\r\n              style={{ marginRight: \"8px\" }}\r\n              onClick={() => {\r\n                monday.execute(\"confirm\", {\r\n                  message: \"Are you sure you want to reset the nodes? \" +\r\n                    \"You will lose all of the connections that you have made, and all of the original connections will be returned.\",\r\n                  confirmButton: \"Confirm\",\r\n                  cancelButton: \"Cancel\",\r\n                  excludeCancelButton: false\r\n                }).then((res) => {\r\n                  if (res.data[\"confirm\"] === true) {\r\n                    // do the reset here\r\n                  }\r\n                });\r\n              }}\r\n              style={{ marginRight: \"8px\" }}>\r\n              Reset\r\n            </Button>\r\n          </UIOverlay>\r\n        </ReactFlowProvider>\r\n\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}