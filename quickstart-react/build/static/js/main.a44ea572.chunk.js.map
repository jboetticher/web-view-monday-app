{"version":3,"sources":["nodes/ItemNode.js","nodes/PrettyItemNode.js","App.js","serviceWorker.js","index.js"],"names":["memo","data","type","position","style","background","onConnect","params","console","log","label","id","maxWidth","group","title","monday","mondaySdk","App","props","state","settings","name","listen","res","setState","context","api","variables","boardIds","then","boardData","statusColors","statusColor","itemColumnValues","boardColumnData","statusSettings","forEach","column","cIndex","statusInfoJson","JSON","parse","Object","entries","labelData","localID","status","nodeTypes","itmNode","ItemNode","prettyNode","PrettyNode","this","bdata","columnData","boardElements","board","bIndex","previousNodeId","item","itIndex","groupName","titleName","push","padding","borderRadius","border","borderColor","x","y","source","target","animated","className","display","elements","onElementClick","event","element","PrettyItemNode","execute","itemId","kind","alert","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a44ea572.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\n\r\n\r\n\r\nexport default memo(({ data }) => {\r\n  \treturn (\r\n\t    <>\r\n\t        <Handle\r\n                type=\"target\"\r\n                position=\"left\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n                onConnect={(params) => console.log('handle onConnect', params)}\r\n            />\r\n\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"top\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"right\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"bottom\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n\r\n            <h4>{data?.label}</h4>\r\n            <div style={{style:\"flex\"}}>\r\n                <p>The background color should change based on whether or not it's done, in progress, or stuck.</p>\r\n            </div>\r\n\r\n\t    </>\r\n    );\r\n});","import React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\n\r\n\r\n// todo: make color of node change based on whether or not it's finished\r\n// todo: make the color of the dependent nodes change based on whether or not it's finished\r\n\r\n\r\nexport default memo(({ data }) => {\r\n    return (\r\n        <>\r\n            <Handle\r\n                type=\"target\"\r\n                position=\"top\"\r\n                id=\"t\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"right\"\r\n                id=\"r\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"bottom\"\r\n                id=\"b\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"left\"\r\n                id=\"l\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n                onConnect={(params) => console.log('handle onConnect', params)}\r\n            />\r\n\r\n            <h4>{data?.label}</h4>\r\n            <div style={{ maxWidth: \"150px\" }}>\r\n                <h4>Group: {data?.group}</h4>\r\n                <p>{data?.title}</p>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n});","import React from \"react\";\r\nimport \"./App.css\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\n\r\nimport ItemNode from \"./nodes/ItemNode.js\";\r\nimport PrettyNode from \"./nodes/PrettyItemNode.js\"\r\n\r\nimport ReactFlow from 'react-flow-renderer';\r\n\r\nimport Button from \"monday-ui-react-core/dist/Button.js\";\r\nimport \"monday-ui-react-core/dist/Button.css\";\r\nimport PrettyItemNode from \"./nodes/PrettyItemNode.js\";\r\n\r\nconst monday = mondaySdk();\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Default state\r\n    this.state = {\r\n      settings: {},\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  // use to communicate with event listeners\r\n  componentDidMount() {\r\n    monday.listen(\"settings\", res => {\r\n      this.setState({ settings: res.data });\r\n    });\r\n\r\n    monday.listen(\"context\", res => {\r\n      this.setState({ context: res.data });\r\n\r\n      // board info query\r\n      monday.api(`query ($boardIds: [Int]) \r\n      { \r\n        boards (ids:$boardIds) { \r\n          name \r\n          items { id name group {title color} column_values { title text } } \r\n          columns {\r\n            title\r\n            settings_str\r\n          }\r\n        } \r\n      }`,\r\n        { variables: { boardIds: this.state.context.boardIds } }\r\n      ).then(res => {\r\n        this.setState({ boardData: res.data });\r\n        console.log(res);\r\n      });\r\n\r\n      console.log(this.state.context);\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    // determines the color of a node\r\n    var statusColors = null;\r\n    function statusColor(itemColumnValues, boardColumnData) {\r\n\r\n      // retrieves the status colors if not done already\r\n      if(statusColors == null)\r\n      {\r\n\r\n        var statusSettings = \"pog\";\r\n        boardColumnData?.forEach(function (column, cIndex) {\r\n          if(column['title'] == \"Status\")\r\n          {\r\n            statusSettings = column['settings_str'];\r\n          }\r\n        });\r\n\r\n        statusColors = {};\r\n        var statusInfoJson = JSON.parse(statusSettings);\r\n        Object.entries(statusInfoJson['labels']).forEach(function(labelData) {\r\n          var localID = labelData[0];\r\n          var name = labelData[1];\r\n          statusColors[name] = statusInfoJson['labels_colors'][localID]['color'];\r\n        });\r\n      }\r\n\r\n      // gets the status from the column values\r\n      var status = \"\";\r\n      itemColumnValues?.forEach(function (column, cIndex) {\r\n        if (column['title'] === \"Status\") {\r\n          status = column['text'];\r\n        }\r\n      });\r\n\r\n      // returns the right color css\r\n      if(status in statusColors) return statusColors[status];\r\n      else { return \"var(--color-ui_grey)\"; }\r\n    }\r\n\r\n    // what to do when the user clicks on an element\r\n    function onElementClick(event, element) {\r\n      if (typeof (element) === typeof (PrettyItemNode)) {\r\n        // monday.com FUCKING SUCKS BECAUSE THEIR API IS FUCKING BROKEN SINCE AUGUST AND THIS DOESN'T FUCKING WORK\r\n        //monday.execute('openItemCard', { itemId: element[\"id\"], kind: 'columns' });\r\n\r\n        monday.execute('openItemCard', { itemId: element[\"id\"], kind: 'updates' });\r\n      }\r\n      else {\r\n        alert(\"OH\");\r\n      }\r\n    }\r\n\r\n\r\n    const nodeTypes = {\r\n      itmNode: ItemNode,\r\n      prettyNode: PrettyNode\r\n    };\r\n\r\n    const elements = [\r\n      { id: '1', data: { label: 'Node 1' }, position: { x: 250, y: 5 } },\r\n      // you can also pass a React component as a label\r\n      { id: '2', data: { label: 'node 2' }, position: { x: 100, y: 100 } },\r\n      {\r\n        id: '3',\r\n        type: 'itmNode',\r\n        style: { border: '1px solid #777', padding: 10 },\r\n        position: { x: 300, y: 50 },\r\n      },\r\n      {\r\n        id: '4', type: \"prettyNode\", data: { label: 'Pretty Node' }, position: { x: 150, y: 150 },\r\n        style: { padding: \"16px\", borderRadius: \"8px\", background: \"var(--color-egg_yolk)\", maxWidth: \"200px\" }\r\n      },\r\n      { id: 'e1-2', source: '1', target: '2', animated: true },\r\n    ];\r\n\r\n    // Only execute once board data has loaded\r\n    if (this.state.boardData != null) {\r\n\r\n      //converts strange JSON data into usable array\r\n      var bdata = Object.entries(this.state.boardData);\r\n\r\n      // retrieves column data FOR JUST THE FIRST BOARD\r\n      var columnData = bdata[0][1][0]['columns'];\r\n      var boardElements = [];\r\n\r\n\r\n      //Goes into each board element in the JSON data\r\n      //bdata[0][1] is where the list of boards are after the Object.entries conversion\r\n      bdata[0][1].forEach(function (board, bIndex) {\r\n\r\n        var previousNodeId = -1;\r\n\r\n        //Goes into each item element in the JSON data\r\n        board['items'].forEach(function (item, itIndex) {\r\n\r\n          let groupName = item['group']['title'];\r\n          let titleName = item['name'];\r\n\r\n          // adds a node\r\n          boardElements.push(\r\n            {\r\n              id: item['id'],\r\n              type: \"prettyNode\",\r\n              data: { title: titleName, group: groupName },\r\n              style: { \r\n                padding: \"16px\", \r\n                borderRadius: \"8px\", border: \"2px solid\", borderColor: item['group']['color'], \r\n                background: statusColor(item['column_values'], columnData) \r\n              },\r\n              position: { x: 200 * bIndex, y: 200 * itIndex }\r\n            }\r\n          );\r\n\r\n          // adds an animated connector to the next one\r\n          if (previousNodeId > 0) {\r\n            boardElements.push(\r\n              {\r\n                id: 'e' + previousNodeId + '-' + item['id'],\r\n                source: previousNodeId,\r\n                target: item['id'],\r\n                animated: true\r\n              }\r\n            )\r\n          }\r\n\r\n          previousNodeId = item['id'];\r\n        });\r\n      });\r\n    }\r\n\r\n\r\n\r\n    // note: adding a background threw a shit ton of errors for some reason whoops\r\n    return (\r\n      <div\r\n        className=\"App\"\r\n        style={{ display: \"block\", background: (this.state.settings.background) }}\r\n      >\r\n\r\n        <ReactFlow\r\n          elements={boardElements}\r\n          nodeTypes={nodeTypes}\r\n          onElementClick={onElementClick}\r\n        >\r\n\r\n        </ReactFlow>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}