{"version":3,"sources":["nodes/ItemNode.js","nodes/PrettyItemNode.js","components/UIOverlay.js","App.js","serviceWorker.js","index.js"],"names":["memo","data","type","position","style","background","onConnect","params","console","log","label","groupColor","height","borderRadius","top","left","right","bottom","id","maxWidth","group","title","textAlign","statusData","padding","UIOverlay","props","zIndex","visibility","className","children","monday","mondaySdk","App","state","settings","name","listen","res","setState","context","api","variables","boardIds","then","boardData","filteredItems","statusColors","nodeTypes","itmNode","ItemNode","prettyNode","PrettyItemNode","this","bdata","boards","columnData","boardElements","forEach","board","bIndex","indexOf","previousNodeId","previousGroupName","groupIds","groupIndex","currentGroupId","item","itIndex","groupName","titleName","nodeBackgroundColor","filteredData","itemId","colorString","Object","entries","num","numIndex","nodeColorOnFilter","itemColumnValues","boardColumnData","statusSettings","column","cIndex","statusInfoJson","JSON","parse","labelData","localID","status","color","statusColor","push","boxShadow","x","y","source","target","animated","display","elements","onElementClick","event","element","execute","kind","alert","width","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c72b4eca.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\n\r\n\r\n\r\nexport default memo(({ data }) => {\r\n  \treturn (\r\n\t    <>\r\n\t        <Handle\r\n                type=\"target\"\r\n                position=\"left\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n                onConnect={(params) => console.log('handle onConnect', params)}\r\n            />\r\n\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"top\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"right\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"bottom\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n\r\n            <h4>{data?.label}</h4>\r\n            <div style={{style:\"flex\"}}>\r\n                <p>The background color should change based on whether or not it's done, in progress, or stuck.</p>\r\n            </div>\r\n\r\n\t    </>\r\n    );\r\n});","import React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\n\r\n\r\n// todo: make color of node change based on whether or not it's finished\r\n// todo: make the color of the dependent nodes change based on whether or not it's finished\r\n\r\n\r\nexport default memo(({ data }) => {\r\n    return (\r\n        <>\r\n            <div style={{\r\n                position: \"fixed\",\r\n                background: data?.groupColor,\r\n                height: \"16px\",\r\n                borderRadius: \"8px\",\r\n                top: \"0px\", left: \"0px\", right: \"0px\",\r\n            }}>\r\n                <div style={{\r\n                    position: \"absolute\",\r\n                    background: data?.groupColor,\r\n                    height: \"8px\",\r\n                    bottom: \"0px\", left: \"0px\", right: \"0px\"\r\n                }} />\r\n            </div>\r\n\r\n            <Handle\r\n                type=\"target\"\r\n                position=\"top\"\r\n                id=\"t\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"bottom\"\r\n                id=\"b\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"right\"\r\n                id=\"r\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"left\"\r\n                id=\"l\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n                onConnect={(params) => console.log('handle onConnect', params)}\r\n            />\r\n\r\n            <h4>{data?.label}</h4>\r\n            <div style={{ maxWidth: \"150px\" }}>\r\n                <h4>Group: {data?.group}</h4>\r\n                <p>{data?.title}</p>\r\n            </div>\r\n            <div style={{\r\n                textAlign: \"center\",\r\n                background: data?.statusData['color'],\r\n                borderRadius: \"4px\",\r\n                padding: \"4px\"\r\n            }}>\r\n                {data?.statusData['status'] === \"\" ? \"Empty\" : data.statusData['status']}\r\n            </div>\r\n\r\n        </>\r\n    );\r\n});","import React from 'react';\r\n\r\nlet UIOverlay = props => {\r\n    return (\r\n        <div style={{\r\n            zIndex: \"100\",\r\n            position: \"absolute\",\r\n            top: \"0px\", bottom: \"0px\", right: \"0px\", left: \"0px\",\r\n            visibility: \"hidden\"\r\n        }}>\r\n            <span className=\"ui-overlay-item\">\r\n                {props?.children}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { UIOverlay };\r\nexport default UIOverlay;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\n\r\nimport ReactFlow from 'react-flow-renderer';\r\nimport ItemNode from \"./nodes/ItemNode.js\";\r\nimport PrettyItemNode from \"./nodes/PrettyItemNode.js\";\r\nimport \"./css/node-view.css\";\r\n\r\nimport Button from \"monday-ui-react-core/dist/Button.js\";\r\nimport \"monday-ui-react-core/dist/Button.css\";\r\nimport UIOverlay from \"./components/UIOverlay\";\r\n\r\nconst monday = mondaySdk();\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Default state\r\n    this.state = {\r\n      settings: {},\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  // use to communicate with event listeners\r\n  componentDidMount() {\r\n    monday.listen(\"settings\", res => {\r\n      this.setState({ settings: res.data });\r\n    });\r\n\r\n    monday.listen(\"context\", res => {\r\n      this.setState({ context: res.data });\r\n\r\n      // board info query\r\n      monday.api(`query ($boardIds: [Int]) \r\n      { \r\n        boards (ids:$boardIds) { \r\n          name \r\n          items { id name group {title color} column_values { title text } } \r\n          columns {\r\n            title\r\n            settings_str\r\n          }\r\n        } \r\n      }`,\r\n        { variables: { boardIds: this.state.context.boardIds } }\r\n      ).then(res => {\r\n        this.setState({ boardData: res.data });\r\n        //console.log(res);\r\n      });\r\n\r\n      //console.log(this.state.context);\r\n    });\r\n\r\n    monday.listen(\"itemIds\", (res) => {\r\n      this.setState({ filteredItems: res.data });\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    // determines the color of a node\r\n    var statusColors = null;\r\n    function statusColor(itemColumnValues, boardColumnData) {\r\n\r\n      // retrieves the status colors if not done already\r\n      if (statusColors == null) {\r\n\r\n        var statusSettings = \"pog\";\r\n        boardColumnData?.forEach(function (column, cIndex) {\r\n          if (column['title'] == \"Status\") {\r\n            statusSettings = column['settings_str'];\r\n          }\r\n        });\r\n\r\n        statusColors = {};\r\n        var statusInfoJson = JSON.parse(statusSettings);\r\n        Object.entries(statusInfoJson['labels']).forEach(function (labelData) {\r\n          var localID = labelData[0];\r\n          var name = labelData[1];\r\n          statusColors[name] = statusInfoJson['labels_colors'][localID]['color'];\r\n        });\r\n      }\r\n\r\n      // gets the status from the column values\r\n      var status = \"\";\r\n      itemColumnValues?.forEach(function (column, cIndex) {\r\n        if (column['title'] === \"Status\") {\r\n          status = column['text'];\r\n        }\r\n      });\r\n\r\n      // returns the right color css\r\n      if (status in statusColors) return { status: status, color: statusColors[status] };\r\n      else { return { status: \"\", color: \"var(--color-ui_grey)\" }; }\r\n    }\r\n\r\n    // what to do when the user clicks on an element\r\n    function onElementClick(event, element) {\r\n      if (typeof (element) === typeof (PrettyItemNode)) {\r\n        // monday.com FUCKING SUCKS BECAUSE THEIR API IS FUCKING BROKEN SINCE AUGUST AND THIS DOESN'T FUCKING WORK\r\n        //monday.execute('openItemCard', { itemId: element[\"id\"], kind: 'columns' });\r\n\r\n        monday.execute('openItemCard', { itemId: element[\"id\"], kind: 'updates' });\r\n      }\r\n      else {\r\n        alert(\"OH\");\r\n      }\r\n    }\r\n\r\n    // returns the right color based on the current filter\r\n    function nodeColorOnFilter(filteredData, itemId) {\r\n\r\n      if (filteredData == null) return \"var(--color-snow_white)\";\r\n\r\n      var colorString = \"var(--color-jarco_gray)\";\r\n      Object.entries(filteredData).forEach(function (num, numIndex) {\r\n        console.log(\"suggestion for \" + itemId + \": \" + num[1]);\r\n        if (itemId == num[1]) { \r\n          colorString = \"var(--color-snow_white)\"; \r\n          console.log(\"Holy smokes, you did it! they're equal! now colorstring: \" + colorString);\r\n        }\r\n      });\r\n\r\n      return colorString;\r\n    }\r\n\r\n    // pass in the item and the board it is in, alogn with all the boardData\r\n    // returns an array that holds all the data about the subitems of an item\r\n    /* CURRENTLY UNABLE TO WORK DUE TO CONSTRAINTS WITH MONDAY API AND SUBITEMS */\r\n    /*function getSubitems(boardData, board, parentItem){\r\n      let subitemArray = [];\r\n\r\n      let subitemBoard;\r\n      boardData.forEach(function(board){\r\n        if (board['name'] == \"Subitems of \" + board['name']){\r\n          subitemBoard = board;\r\n        }\r\n      });\r\n\r\n      let parentSubitemText = parentItem['column_values'][0]['text'];\r\n      subitemBoard.forEach(function(subitem){\r\n        \r\n        //if the parent subitem text contains the name of the subitem,\r\n        //then that subitem in the pool is a subitem of our parent\r\n        if (parentSubitemText.indexOf(subitem['name']) > 0){\r\n          subitemArray.push(subitem);\r\n        }\r\n      });\r\n\r\n      return subitemArray;\r\n    }*/\r\n\r\n    const nodeTypes = {\r\n      itmNode: ItemNode,\r\n      prettyNode: PrettyItemNode\r\n    };\r\n\r\n    // Only execute once board data has loaded\r\n    if (this.state.boardData != null) {\r\n\r\n      //bdata is the array monday passed us with all the data\r\n      var bdata = this.state.boardData.boards;\r\n\r\n      //the items that should be highlighted by the filter\r\n      var filteredItems = this.state.filteredItems;\r\n\r\n      console.log(\"-----------------------\");\r\n      console.log(this.state.boardData.boards);\r\n      console.log(\"-----------------------\");\r\n\r\n      // retrieves column data FOR JUST THE FIRST BOARD\r\n      var columnData = bdata[0]['columns'];\r\n      var boardElements = [];\r\n\r\n      //Goes into each board element in the JSON data array\r\n      bdata.forEach(function (board, bIndex) {\r\n        if (board['name'].indexOf(\"Subitems of\") == 1) return;\r\n        var previousNodeId = -1;\r\n        var previousGroupName = \"\";\r\n\r\n        // Adds an id number & index to the group ids\r\n        let groupIds = {};\r\n        let groupIndex = {};\r\n        let currentGroupId = 0;\r\n        board['items'].forEach(function (item, itIndex) {\r\n          let groupName = item['group']['title'];\r\n          if (!(groupName in groupIds)) {\r\n            groupIds[groupName] = currentGroupId;\r\n            groupIndex[groupName] = 0;\r\n            currentGroupId++;\r\n          }\r\n        });\r\n\r\n        //Goes into each item element in the JSON data\r\n        board['items'].forEach(function (item, itIndex) {\r\n\r\n          let groupName = item['group']['title'];\r\n          let titleName = item['name'];\r\n          let nodeBackgroundColor = nodeColorOnFilter(filteredItems, item['id']);\r\n\r\n          // gets status data\r\n          let statusData = statusColor(item['column_values'], columnData);\r\n\r\n          // gets subitems if the item has subitems\r\n          // item['column_values'][0]['text'] provides a text of the subitems\r\n          // if no subitems, value will be empty string\r\n          if (item['column_values'][0] != \"\") {\r\n            let subitems = item['column_values'][0]['text'];\r\n            //console.log(subitems);\r\n          }\r\n\r\n\r\n          // adds a node\r\n          boardElements.push(\r\n            {\r\n              id: item['id'],\r\n              type: \"prettyNode\",\r\n              data: {\r\n                title: titleName,\r\n                group: groupName, groupColor: item['group']['color'],\r\n                statusData: statusData\r\n              },\r\n              style: {\r\n                padding: \"16px\",\r\n                borderRadius: \"8px\", //border: \"4px solid\", borderColor: item['group']['color'],\r\n                background: nodeBackgroundColor, //item['group']['color']\r\n                boxShadow: \"0px 6px 20px -2px rgba(0, 0, 0, 0.2)\"\r\n              },\r\n              position: { x: 250 * groupIds[groupName] + bIndex * 1000, y: 250 * groupIndex[groupName] }\r\n            }\r\n          );\r\n\r\n          // increments group index\r\n          groupIndex[groupName] += 1;\r\n\r\n          // adds an animated connector to the next one if in same group\r\n          if (previousNodeId > 0 && previousGroupName == groupName) {\r\n            boardElements.push(\r\n              {\r\n                id: 'e' + previousNodeId + '-' + item['id'],\r\n                source: previousNodeId,\r\n                target: item['id'],\r\n                animated: true\r\n              }\r\n            )\r\n          }\r\n\r\n          previousNodeId = item['id'];\r\n          previousGroupName = groupName;\r\n        });\r\n      });\r\n    }\r\n\r\n\r\n\r\n    // note: adding a background threw a shit ton of errors for some reason whoops\r\n    return (\r\n      <div\r\n        className=\"App\"\r\n        style={{ display: \"block\", background: \"var(--color-mud_black)\" }}//(this.state.settings.background) }}\r\n      >\r\n        <ReactFlow\r\n          elements={boardElements}\r\n          nodeTypes={nodeTypes}\r\n          onElementClick={onElementClick}\r\n        >\r\n        </ReactFlow>\r\n        <UIOverlay>\r\n          <div style={{\r\n            width: \"100px\", height: \"100px\",\r\n            bottom: \"0px\", left: \"0px\"\r\n          }}>\r\n            <a href=\"https://pisslake.github.io/\">\r\n              <Button>Pisslake</Button>\r\n            </a>\r\n          </div>\r\n        </UIOverlay>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}