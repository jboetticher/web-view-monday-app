{"version":3,"sources":["components/Card.js","nodes/ItemNode.js","nodes/PrettyNode_proto.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","style","margin","border","padding","background","className","content","memo","data","type","position","onConnect","params","console","log","id","top","bottom","label","monday","mondaySdk","App","state","settings","name","listen","res","setState","context","api","variables","boardIds","then","boardData","nodeTypes","itmNode","ItemNode","prettyNode","PrettyNode","display","this","elements","x","y","borderRadius","maxWidth","source","target","animated","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4762ef92.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet Card = props => {\r\n    return (\r\n        <div style={{ margin: \"10px\", border: \"solid\", padding: \"5px\", background: \"var(--color-explosive)\" }}\r\n            className=\"m-4\">\r\n            {props?.content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Card };\r\nexport default Card;","import React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\nexport default memo(({ data }) => {\r\n  return (\r\n    <>\r\n      <Handle\r\n        type=\"target\"\r\n        position=\"left\"\r\n        style={{ background: '#555' }}\r\n        onConnect={(params) => console.log('handle onConnect', params)}\r\n      />\r\n      <div>\r\n        Test Node:\r\n      </div>\r\n      <input\r\n        className=\"nodrag\"\r\n        type=\"color\"\r\n        /*onChange={data.onChange}\r\n        defaultValue={data.color}*/\r\n      />\r\n      <Handle\r\n        type=\"source\"\r\n        position=\"right\"\r\n        id=\"a\"\r\n        style={{ top: 10, background: '#555' }}\r\n      />\r\n      <Handle\r\n        type=\"source\"\r\n        position=\"right\"\r\n        id=\"b\"\r\n        style={{ bottom: 10, top: 'auto', background: '#555' }}\r\n      />\r\n    </>\r\n  );\r\n});","import React, { memo } from 'react';\r\nimport { Handle } from 'react-flow-renderer';\r\n\r\n\r\n\r\n// todo: make color of node change based on whether or not it's finished\r\n// todo: make the color of the dependent nodes change based on whether or not it's finished\r\n\r\n\r\nexport default memo(({ data }) => {\r\n    return (\r\n        <>\r\n            <Handle\r\n                type=\"target\"\r\n                position=\"left\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n                onConnect={(params) => console.log('handle onConnect', params)}\r\n            />\r\n            <h4>{data?.label}</h4>\r\n            <div style={{style:\"flex\"}}>\r\n                <p>The background color should change based on whether or not it's done, in progress, or stuck.</p>\r\n            </div>\r\n            <Handle\r\n                type=\"source\"\r\n                position=\"right\"\r\n                id=\"a\"\r\n                style={{ background: 'var(--color-mud_black)' }}\r\n            />\r\n        </>\r\n    );\r\n});","import React from \"react\";\r\nimport \"./App.css\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport Card from \"./components/Card.js\";\r\n\r\nimport ItemNode from \"./nodes/ItemNode.js\";\r\nimport PrettyNode from \"./nodes/PrettyNode_proto.js\"\r\n\r\nimport ReactFlow from 'react-flow-renderer';\r\n\r\nimport Button from \"monday-ui-react-core/dist/Button.js\";\r\nimport \"monday-ui-react-core/dist/Button.css\";\r\n\r\nconst monday = mondaySdk();\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Default state\r\n    this.state = {\r\n      settings: {},\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  // use to communicate with event listeners\r\n  componentDidMount() {\r\n    monday.listen(\"settings\", res => {\r\n      this.setState({ settings: res.data });\r\n    });\r\n\r\n    monday.listen(\"context\", res => {\r\n      this.setState({ context: res.data });\r\n      console.log(res.data);\r\n      monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items() { name column_values { title text } } } }`,\r\n        { variables: { boardIds: this.state.context.boardIds } }\r\n      )\r\n        .then(res => {\r\n          this.setState({ boardData: res.data });\r\n          console.log(res.data);\r\n        });\r\n    })\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const nodeTypes = {\r\n      itmNode: ItemNode,\r\n      prettyNode: PrettyNode\r\n    };\r\n\r\n    const elements = [\r\n      { id: '1', data: { label: 'Node 1' }, position: { x: 250, y: 5 } },\r\n      // you can also pass a React component as a label\r\n      { id: '2', data: { label: 'Node 2' }, position: { x: 100, y: 100 } },\r\n      {\r\n        id: '3',\r\n        type: 'itmNode',\r\n        //data: { onChange: onChange, color: initBgColor }\r\n        style: { border: '1px solid #777', padding: 10 },\r\n        position: { x: 300, y: 50 },\r\n      },\r\n      {\r\n        id: '4', type: \"prettyNode\", data: { label: 'Pretty Node' }, position: { x: 150, y: 150 },\r\n        style: { padding: \"16px\", borderRadius: \"8px\", background: \"var(--color-egg_yolk)\", maxWidth: \"200px\" }\r\n      },\r\n      { id: 'e1-2', source: '1', target: '2', animated: true },\r\n    ];\r\n\r\n    return (\r\n      <div\r\n        className=\"App\"\r\n        style={{ display: \"block\", background: (this.state.settings.background) }}\r\n      >\r\n        <Card>There ain't no fuckin infinite loop</Card>\r\n        <ReactFlow elements={elements} nodeTypes={nodeTypes}/>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}